Importing necessary libraries


Loading in the Data
Transforming classes into integers for the model
Getting the bacterial/viral counts from the data and clinical symptoms

Getting feature names from data
#########################
#Data Loaded and Ready!!#
#########################


################
#Working on RFC#
################
Confusion matrix, without normalization
[[4 0 0]
 [0 4 0]
 [0 0 1]]
[[4 0 0]
 [0 4 0]
 [0 0 1]]
             precision    recall  f1-score   support

          0       1.00      1.00      1.00         4
          1       1.00      1.00      1.00         4
          2       1.00      1.00      1.00         1

avg / total       1.00      1.00      1.00         9

##########################
#Random Forest Classifier#
##########################

After 20 Trials:
AUC Case: 0.85
AUC Control: 1.0
AUC Follow: 1.0


##########################################
#Working on Linear Support Vector Machine#
##########################################
Confusion matrix, without normalization
[[3 0 0]
 [0 3 0]
 [0 0 3]]
[[3 0 0]
 [0 3 0]
 [0 0 3]]
             precision    recall  f1-score   support

          0       1.00      1.00      1.00         3
          1       1.00      1.00      1.00         3
          2       1.00      1.00      1.00         3

avg / total       1.00      1.00      1.00         9

############
#Linear SVM#
############

After 20 Trials:
AUC Case: 1.0
AUC Control: nan
AUC Follow: 1.0


################################
#Working on Logistic Regression#
################################
Confusion matrix, without normalization
[[3 0 0]
 [0 3 0]
 [0 0 3]]
[[3 0 0]
 [0 3 0]
 [0 0 3]]
             precision    recall  f1-score   support

          0       1.00      1.00      1.00         3
          1       1.00      1.00      1.00         3
          2       1.00      1.00      1.00         3

avg / total       1.00      1.00      1.00         9

#####################
#Logistic Regression#
#####################

After 20 Trials:
AUC Case: 1.0
AUC Control: 1.0
AUC Follow: 1.0
############################
#Comparison Results for K=2#
############################
Result for K = 2
RFC,Lin: 0.6012
Log,RFC: 0.6245
RFC,KMeans: 0.2617
KMeans,Lin: 0.3091
Log,KMeans: 0.3259
Log,Lin: 0.8948


############################
#Comparison Results for K=3#
############################
Result for K = 3
RFC,Lin: 0.7448
Log,RFC: 0.7881
RFC,KMeans: 0.3801
KMeans,Lin: 0.5212
Log,KMeans: 0.5254
Log,Lin: 0.9092


############################
#Comparison Results for K=4#
############################
Result for K = 4
RFC,Lin: 0.6358
Log,RFC: 0.616
RFC,KMeans: 0.3228
KMeans,Lin: 0.3905
Log,KMeans: 0.405
Log,Lin: 0.9326


############################
#Comparison Results for K=5#
############################
Result for K = 5
RFC,Lin: 0.7468
Log,RFC: 0.7583
RFC,KMeans: 0.3318
KMeans,Lin: 0.4618
Log,KMeans: 0.4618
Log,Lin: 0.9409


############################
#Comparison Results for K=6#
############################
Result for K = 6
RFC,Lin: 0.6647
Log,RFC: 0.7156
RFC,KMeans: 0.2929
KMeans,Lin: 0.4207
Log,KMeans: 0.4431
Log,Lin: 0.9014


############################
#Comparison Results for K=7#
############################
Result for K = 7
RFC,Lin: 0.6889
Log,RFC: 0.6802
RFC,KMeans: 0.3168
KMeans,Lin: 0.4321
Log,KMeans: 0.4488
Log,Lin: 0.908


############################
#Comparison Results for K=8#
############################
Result for K = 8
RFC,Lin: 0.6881
Log,RFC: 0.6881
RFC,KMeans: 0.2923
KMeans,Lin: 0.3394
Log,KMeans: 0.3394
Log,Lin: 0.9524


############################
#Comparison Results for K=9#
############################
Result for K = 9
RFC,Lin: 0.6977
Log,RFC: 0.7438
RFC,KMeans: 0.2985
KMeans,Lin: 0.2952
Log,KMeans: 0.2966
Log,Lin: 0.9062


#############################
#Comparison Results for K=10#
#############################
Result for K = 10
RFC,Lin: 0.692
Log,RFC: 0.6899
RFC,KMeans: 0.3213
KMeans,Lin: 0.288
Log,KMeans: 0.276
Log,Lin: 0.9146


